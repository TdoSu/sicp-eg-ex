(load "utils.ss")

(display-newline "
  我认为, 在计算机科学中保持计算的趣味性是特别重要的事情.
  这一学科在起步时饱含着趣味性.
  当然, 哪些付钱的客户们时长感觉受了骗.
  一段时间之后, 我们开始严肃的看待他们的抱怨.
  我们开始感觉到, 自己真的像是要负起成功的, 无差错的, 完美的使用这些机器的责任.
  我不认为我们可以做到这些.
  我认为我们的责任失去拓展这一领域, 将其发展到新的方向, 并在自己的家里保持趣味性.
  我希望计算机科学的领域绝不要丧失趣味意识.
  最重要的是, 我希望我们绝对不要编程传道士, 不要认为你是兜售圣经的人,
  世界上这种人已经太多了.
  你所知道的有关计算的东西, 其他人也都能学到.
  绝不要认为似乎成功计算的钥匙就掌握在你的手里.
  我希望你掌握的是一种智慧: 那种看到这一机器比你第一次站在他面前时能做得更多的能力,
  这样你才能向前推进它.
                                        ---- Alan J. Perlis (Algol 60 作者)
")

;;; 一个语言最重要的三个机制:
;;; 1. 有哪些最简单的基本元素                       -- 基本元素
;;; 2. 怎样通过这些简单元素构造复合元素             -- 组合方法
;;; 3. 怎样给复合元素命名, 并且作为简单元素来使用   -- 抽象方法

;;; 程序语言的另一个维度是: 语言里面的东西可以被分为过程和数据
;;; 它们的界线是相对的.

;;; 表达式 expression 和求值 value
;;; 基本的表达式 - 数字 486 --> 值 486
;;; 基本的过程 +, -, *, /
;;; 组合式 (+ 137 349)
;;;   (运算符 运算对象) -- 运算符写在左边, 叫前缀表达式

;;; define 可以给一个东西起名字
(define pi 3.14159)
(define radius 10)
(define circumference (* 2 pi radius))
(display-newline circumference)

;;; 存储 define 定义的名字和值的对应关系的东西, 叫做环境 (一般是一个表)

;;; 每个表达式都有一个值,
;;; 基本的表达式 (数字) 的值就是它自身,
;;; 那么组合式如何求值呢?
;;; 1. 对于组合式的各个子表达式求值
;;;   这个求值过程是递归的,
;;;   三种基本情况: 数字就是数字, 基本过程是机器指令, 名字就是它对应的值,
;;;   环境的意义就是确定各个符号 (名字) 对应的值.
;;; 2. 把最左边的子表达式的值 (运算符) 应用于其他子表达式 (实际参数)
;;;   对于基本过程, 怎么应用由具体实现来提供 (换句话说就是, 不用你管)
;;;   对于复合过程 -- 代换模型 -- 环境模型
;;; 3. 有一些特殊形式并不这么求值, 比如 define.

(define e 2.71828)
(define double-e (* 2 e))
;;; 这种方式可以给 表达式-值-数据 取名, 那么怎么给复合的过程取名呢?

(display-newline (* 3 3))
(display-newline (* 4 4))
(display-newline (* 3.14 3.14))

(define (square x) (* x x))
;;; 等价于
(define square (lambda (x) (* x x)))
;;; 过程其实也是一个特殊的表达式 (组合式)

(display-newline (square 3))
(display-newline (square 4))
(display-newline (square 3.14))

;;; 对于基本过程的求值不需要我们去管,
;;; 那么对于我们自己命名的过程要如何求值呢?
;;; (如何转化为不需要我们操心的基本过程求值)
;;; ---- 过程应用的代换模型

(define (sum-of-square a b) (+ (square a) (square b)))
(define (f a) (sum-of-square (+ a 1) (* a 2)))

(display-newline (f 5))
;;; 代换模型: 用实际参数代替形式参数, 对过程体求值
;;; --------------------------------
;;; (f 5)
;;; ((lambda (a) (sum-of-square (+ a 1) (* a 2))) 5)
;;; (sum-of-square (+ 5 1) (* 5 2))
;;; (sum-of-square (+ 5 1) 10)
;;; (sum-of-square 6 10)
;;; ((lambda (a b) (+ (square a) (square b))) 6 10)
;;; (+ (square 6) (square 10))
;;; (+ (square 6) 100)
;;; (+ 36 100)
;;; 136

;;; 应用序和正则序
;;; 先对过程的每个参数求值, 再将操作符应用于参数 -- 应用序
;;;   参数求值后再应用
;;; 现将操作符应用于参数, 到了非求值不可时再对参数求值 -- 正则序
;;;   完全展开后再归约
;;;   (基本操作求值或 if... 特殊操作求值)

;;; 条件表达式和谓词
(define (abs x) (if (> x 0) x (- x)))
(define (abs x) ((if (< x 0) - +) x))
(define (abs x)
  (cond ((> x 0) x)
        ((= x 0) 0)
        ((< x 0) (- x))))
;;; 一个表达式求值结果是 #t #f 那么就叫做谓词 predicate
;;; 谓词基本操作 >, <, =, and, or, not,
;;; 两个基本值 #t #f
;;; 两个特殊的过程 if cond
;;; 注意 and or 也是特殊形式, 不是普通的过程, 和 + * 不同

(define (>= x y) (or (> x y) (= x y)))
(define (>= x y) (not (< x y)))

(display-newline (abs 3))
(display-newline (abs -3))
(display-newline (abs 0))

(exit)

